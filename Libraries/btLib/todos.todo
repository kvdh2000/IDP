api_methods:
    ✔ setup(&Stream stream, int groote) @done(2019-05-27 10:29) @project(api_methods)
    ✔ setup(&Stream stream, int groote, &Stream debug_output) @done(2019-05-27 10:29) @project(api_methods)
        bij de setup kan niet meer de groote worden aangegeven want anders moet ik handmatig dat geheugen 
        managen en dan kan ik momenteel gewoon niet.
    ✔ recieve_[datatype](String name, [datatype] default waarde) @done(2019-05-27 10:31) @project(api_methods)
    ✔ send_[datatype]([datatype]) @done(2019-05-27 10:31) @project(api_methods)
        datatypes:
            ✔ uint_8(byte) @done(2019-05-27 10:31) @project(api_methods / datatypes)
            ✔ int16_t(int) @done(2019-05-27 10:31) @project(api_methods / datatypes)
            ✔ bool @done(2019-05-27 10:31) @project(api_methods / datatypes)
    ✔ update(); @done(2019-05-27 10:31) @project(api_methods)
optioneel:
    ☐ een manier bedenken waarop je de groote van de arrays in de arduino code can specificeren.
    ✔ ervoor zorgen dat als een waarde niet bestaat je zeker weten 0 krijgt. @done(2019-05-27 11:28) @project(optioneel)

stappen:
    - vanuit sender verstuur je vars met namen
    - deze gaan via de bluetooth naar de serial buffer van de ontvangende arudino
    - deze word in de code uitgelezen
    - in de library worden dan de hasmaps geupdate
    - in de arudino code kunnen dan de haspmaps worden uitgelezen

beschrijving protocol:
    [headerbyte1][headerbyte2][de len van het bericht na deze byte][type_marker][waarde als bytes][naam]



de api werkt als volgt

//ontvanger

setup{
    transfer.setup(&Serial);
    transfer.recieve_int("bla", 0);
}

loop{
    transfer.update();
    int bla = transfer.get_int("bla")
}

//sender

setup{
    transfer.setup(&Serial);
}

loop{
    transfer.send_int("bla", 15)
}
